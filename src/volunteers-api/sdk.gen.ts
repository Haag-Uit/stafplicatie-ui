// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListVolunteersData, ListVolunteersResponses, ListVolunteersErrors, CreateVolunteerData, CreateVolunteerResponses, CreateVolunteerErrors, GetVolunteerByPersonData, GetVolunteerByPersonResponses, GetVolunteerByPersonErrors, DeleteVolunteerData, DeleteVolunteerResponses, DeleteVolunteerErrors, GetVolunteerData, GetVolunteerResponses, GetVolunteerErrors, UpdateVolunteerData, UpdateVolunteerResponses, UpdateVolunteerErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List all volunteers
 * Retrieve a list of all volunteers in the system
 */
export const listVolunteers = <ThrowOnError extends boolean = false>(options?: Options<ListVolunteersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListVolunteersResponses, ListVolunteersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/',
        ...options
    });
};

/**
 * Create a new volunteer
 * Create a new volunteer with the provided information
 */
export const createVolunteer = <ThrowOnError extends boolean = false>(options: Options<CreateVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateVolunteerResponses, CreateVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a volunteer by person ID
 * Retrieve a volunteer's details by their person ID
 */
export const getVolunteerByPerson = <ThrowOnError extends boolean = false>(options: Options<GetVolunteerByPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVolunteerByPersonResponses, GetVolunteerByPersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/person/{id}',
        ...options
    });
};

/**
 * Delete a volunteer
 * Delete a volunteer by their ID
 */
export const deleteVolunteer = <ThrowOnError extends boolean = false>(options: Options<DeleteVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVolunteerResponses, DeleteVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/{id}',
        ...options
    });
};

/**
 * Get a volunteer by ID
 * Retrieve a volunteer's details by their ID
 */
export const getVolunteer = <ThrowOnError extends boolean = false>(options: Options<GetVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVolunteerResponses, GetVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/{id}',
        ...options
    });
};

/**
 * Update a volunteer
 * Update a volunteer's information by their ID
 */
export const updateVolunteer = <ThrowOnError extends boolean = false>(options: Options<UpdateVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateVolunteerResponses, UpdateVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};