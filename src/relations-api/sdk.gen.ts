// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListPersonsData, ListPersonsResponses, ListPersonsErrors, CreatePersonData, CreatePersonResponses, CreatePersonErrors, GetPersonsByIdsData, GetPersonsByIdsResponses, GetPersonsByIdsErrors, GetPersonByEmailData, GetPersonByEmailResponses, GetPersonByEmailErrors, SearchPersonsData, SearchPersonsResponses, SearchPersonsErrors, DeletePersonData, DeletePersonResponses, DeletePersonErrors, GetPersonData, GetPersonResponses, GetPersonErrors, UpdatePersonData, UpdatePersonResponses, UpdatePersonErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List all persons
 * Retrieve a list of all persons in the system
 */
export const listPersons = <ThrowOnError extends boolean = false>(options?: Options<ListPersonsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPersonsResponses, ListPersonsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/',
        ...options
    });
};

/**
 * Create a new person
 * Create a new person with the provided information
 */
export const createPerson = <ThrowOnError extends boolean = false>(options: Options<CreatePersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePersonResponses, CreatePersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get multiple persons by their IDs
 * Retrieve multiple persons' details by providing an array of their IDs
 */
export const getPersonsByIds = <ThrowOnError extends boolean = false>(options: Options<GetPersonsByIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetPersonsByIdsResponses, GetPersonsByIdsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a person by email
 * Retrieve a person's details by their email address
 */
export const getPersonByEmail = <ThrowOnError extends boolean = false>(options: Options<GetPersonByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonByEmailResponses, GetPersonByEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/email',
        ...options
    });
};

/**
 * Search persons by email
 * Search for persons by email address (partial match) and return ID and Email
 */
export const searchPersons = <ThrowOnError extends boolean = false>(options: Options<SearchPersonsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchPersonsResponses, SearchPersonsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a person
 * Delete a person by their ID
 */
export const deletePerson = <ThrowOnError extends boolean = false>(options: Options<DeletePersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePersonResponses, DeletePersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/{id}',
        ...options
    });
};

/**
 * Get a person by ID
 * Retrieve a person's details by their ID
 */
export const getPerson = <ThrowOnError extends boolean = false>(options: Options<GetPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonResponses, GetPersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/{id}',
        ...options
    });
};

/**
 * Update a person
 * Update a person's information by their ID
 */
export const updatePerson = <ThrowOnError extends boolean = false>(options: Options<UpdatePersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePersonResponses, UpdatePersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};