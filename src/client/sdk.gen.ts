// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ExportParticipantsData, ExportParticipantsResponses, ExportParticipantsErrors, GetAllParticipantsData, GetAllParticipantsResponses, GetAllParticipantsErrors, DeleteParticipantData, DeleteParticipantResponses, DeleteParticipantErrors, GetParticipantData, GetParticipantResponses, GetParticipantErrors, UpdateParticipantData, UpdateParticipantResponses, UpdateParticipantErrors, UpdatePaymentData, UpdatePaymentResponses, UpdatePaymentErrors, CreateRegistrationData, CreateRegistrationResponses, CreateRegistrationErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Export participants as CSV
 * Exports all participants for the active camp year along with their latest payment details.
 */
export const exportParticipants = <ThrowOnError extends boolean = false>(options?: Options<ExportParticipantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExportParticipantsResponses, ExportParticipantsErrors, ThrowOnError>({
        url: '/export/api/v1/participants',
        ...options
    });
};

/**
 * Get all participants by active year
 * Retrieves all participants for the active campyear.
 */
export const getAllParticipants = <ThrowOnError extends boolean = false>(options?: Options<GetAllParticipantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllParticipantsResponses, GetAllParticipantsErrors, ThrowOnError>({
        url: '/participant/api/v1/',
        ...options
    });
};

/**
 * Delete a participant
 * Deletes a participant by its ID.
 */
export const deleteParticipant = <ThrowOnError extends boolean = false>(options: Options<DeleteParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteParticipantResponses, DeleteParticipantErrors, ThrowOnError>({
        url: '/participant/api/v1/{id}',
        ...options
    });
};

/**
 * Get a participant
 * Retrieves a specific participant by its ID.
 */
export const getParticipant = <ThrowOnError extends boolean = false>(options: Options<GetParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetParticipantResponses, GetParticipantErrors, ThrowOnError>({
        url: '/participant/api/v1/{id}',
        ...options
    });
};

/**
 * Update a participant
 * Updates the details of a participant by its ID.
 */
export const updateParticipant = <ThrowOnError extends boolean = false>(options: Options<UpdateParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateParticipantResponses, UpdateParticipantErrors, ThrowOnError>({
        url: '/participant/api/v1/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a specific payment
 * Updates the details of a payment by its id.
 */
export const updatePayment = <ThrowOnError extends boolean = false>(options: Options<UpdatePaymentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePaymentResponses, UpdatePaymentErrors, ThrowOnError>({
        url: '/payment/api/v1/{year}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register for Haag Uit
 * Creates a camp registration and redirects to payment if ideal.
 */
export const createRegistration = <ThrowOnError extends boolean = false>(options: Options<CreateRegistrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRegistrationResponses, CreateRegistrationErrors, ThrowOnError>({
        url: '/registration/api/v1/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};