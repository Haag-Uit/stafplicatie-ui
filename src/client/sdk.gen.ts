// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetAllCampyearsError, GetAllCampyearsResponse, CreateCampyearData, CreateCampyearError, CreateCampyearResponse, GetCampyearData, GetCampyearError, GetCampyearResponse, UpdateCampyearData, UpdateCampyearError, UpdateCampyearResponse, DeleteCampyearData, DeleteCampyearError, DeleteCampyearResponse, ActivateCampyearData, ActivateCampyearError, ActivateCampyearResponse, CloseCampyearData, CloseCampyearError, CloseCampyearResponse, OpenCampyearData, OpenCampyearError, OpenCampyearResponse, ExportParticipantsError, ExportParticipantsResponse, GetAllParticipantsError, GetAllParticipantsResponse, SearchParticipantsData, SearchParticipantsError, SearchParticipantsResponse, GetParticipantData, GetParticipantError, GetParticipantResponse, UpdateParticipantData, UpdateParticipantError, UpdateParticipantResponse, DeleteParticipantData, DeleteParticipantError, DeleteParticipantResponse, UpdatePaymentData, UpdatePaymentError, UpdatePaymentResponse, GetPersonByEmailData, GetPersonByEmailError, GetPersonByEmailResponse, CreateRegistrationData, CreateRegistrationError, CreateRegistrationResponse, GetAllVolunteersError, GetAllVolunteersResponse, CreateVolunteerData, CreateVolunteerError, CreateVolunteerResponse, RegisterVolunteerData, RegisterVolunteerError, RegisterVolunteerResponse, GetVolunteerData, GetVolunteerError, GetVolunteerResponse, UpdateVolunteerData, UpdateVolunteerError, UpdateVolunteerResponse, DeleteVolunteerData, DeleteVolunteerError, DeleteVolunteerResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get all campyears
 * Gets all campyears
 */
export const getAllCampyears = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllCampyearsResponse, GetAllCampyearsError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/'
    });
};

/**
 * Create a new campyear
 * Creates a new campyear.
 */
export const createCampyear = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateCampyearData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCampyearResponse, CreateCampyearError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/'
    });
};

/**
 * Get a specific campyear
 * Retrieves a campyear by its year.
 */
export const getCampyear = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetCampyearData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCampyearResponse, GetCampyearError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/{year}'
    });
};

/**
 * Update a specific campyear
 * Updates the details of a campyear by its year.
 */
export const updateCampyear = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateCampyearData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateCampyearResponse, UpdateCampyearError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/{year}'
    });
};

/**
 * Delete a specific campyear
 * Deletes a campyear by its year.
 */
export const deleteCampyear = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteCampyearData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCampyearResponse, DeleteCampyearError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/{year}'
    });
};

/**
 * Activate a specific campyear
 * Marks a campyear as active by its year.
 */
export const activateCampyear = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ActivateCampyearData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActivateCampyearResponse, ActivateCampyearError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/{year}/activate'
    });
};

/**
 * Close a specific campyear
 * Marks a campyear as closed by its year.
 */
export const closeCampyear = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CloseCampyearData, ThrowOnError>) => {
    return (options?.client ?? client).post<CloseCampyearResponse, CloseCampyearError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/{year}/close'
    });
};

/**
 * Open a specific campyear
 * Marks a campyear as open by its year.
 */
export const openCampyear = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<OpenCampyearData, ThrowOnError>) => {
    return (options?.client ?? client).post<OpenCampyearResponse, OpenCampyearError, ThrowOnError>({
        ...options,
        url: '/campyear/api/v1/{year}/open'
    });
};

/**
 * Export participants as CSV
 * Exports all participants for the active camp year along with their latest payment details.
 */
export const exportParticipants = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ExportParticipantsResponse, ExportParticipantsError, ThrowOnError>({
        ...options,
        url: '/export/api/v1/participants'
    });
};

/**
 * Get all participants by active year
 * Retrieves all participants for the active campyear.
 */
export const getAllParticipants = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllParticipantsResponse, GetAllParticipantsError, ThrowOnError>({
        ...options,
        url: '/participant/api/v1/'
    });
};

/**
 * Search participants
 * Searches participants based on optional filters: name, email, paymentMethod, paymentState, and attendance.
 */
export const searchParticipants = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<SearchParticipantsData, ThrowOnError>) => {
    return (options?.client ?? client).get<SearchParticipantsResponse, SearchParticipantsError, ThrowOnError>({
        ...options,
        url: '/participant/api/v1/search'
    });
};

/**
 * Get a participant
 * Retrieves a specific participant by its ID.
 */
export const getParticipant = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetParticipantData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetParticipantResponse, GetParticipantError, ThrowOnError>({
        ...options,
        url: '/participant/api/v1/{id}'
    });
};

/**
 * Update a participant
 * Updates the details of a participant by its ID.
 */
export const updateParticipant = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateParticipantData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateParticipantResponse, UpdateParticipantError, ThrowOnError>({
        ...options,
        url: '/participant/api/v1/{id}'
    });
};

/**
 * Delete a participant
 * Deletes a participant by its ID.
 */
export const deleteParticipant = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteParticipantData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteParticipantResponse, DeleteParticipantError, ThrowOnError>({
        ...options,
        url: '/participant/api/v1/{id}'
    });
};

/**
 * Update a specific payment
 * Updates the details of a payment by its id.
 */
export const updatePayment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePaymentData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdatePaymentResponse, UpdatePaymentError, ThrowOnError>({
        ...options,
        url: '/payment/api/v1/{year}'
    });
};

/**
 * Get a person by email
 * Retrieves a person by their email address.
 */
export const getPersonByEmail = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPersonByEmailData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPersonByEmailResponse, GetPersonByEmailError, ThrowOnError>({
        ...options,
        url: '/person/api/v1/find'
    });
};

/**
 * Register for Haag Uit
 * Creates a camp registration and redirects to payment if ideal.
 */
export const createRegistration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateRegistrationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateRegistrationResponse, CreateRegistrationError, ThrowOnError>({
        ...options,
        url: '/registration/api/v1/register'
    });
};

/**
 * Get all volunteers
 * Retrieves all volunteers.
 */
export const getAllVolunteers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllVolunteersResponse, GetAllVolunteersError, ThrowOnError>({
        ...options,
        url: '/volunteer/api/v1/'
    });
};

/**
 * Create a volunteer
 * Creates a new volunteer.
 */
export const createVolunteer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateVolunteerData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateVolunteerResponse, CreateVolunteerError, ThrowOnError>({
        ...options,
        url: '/volunteer/api/v1/'
    });
};

/**
 * Register an existing person as a volunteer
 * Creates a new volunteer and relates it to an already existing person.
 */
export const registerVolunteer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterVolunteerData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterVolunteerResponse, RegisterVolunteerError, ThrowOnError>({
        ...options,
        url: '/volunteer/api/v1/register'
    });
};

/**
 * Get a volunteer
 * Retrieves a specific volunteer by its ID.
 */
export const getVolunteer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetVolunteerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVolunteerResponse, GetVolunteerError, ThrowOnError>({
        ...options,
        url: '/volunteer/api/v1/{id}'
    });
};

/**
 * Update a volunteer
 * Updates the details of a volunteer by its ID.
 */
export const updateVolunteer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateVolunteerData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateVolunteerResponse, UpdateVolunteerError, ThrowOnError>({
        ...options,
        url: '/volunteer/api/v1/{id}'
    });
};

/**
 * Delete a volunteer
 * Deletes a volunteer by its ID.
 */
export const deleteVolunteer = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteVolunteerData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteVolunteerResponse, DeleteVolunteerError, ThrowOnError>({
        ...options,
        url: '/volunteer/api/v1/{id}'
    });
};