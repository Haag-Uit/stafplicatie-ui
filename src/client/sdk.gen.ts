// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetAllCampyearsData, GetAllCampyearsResponses, GetAllCampyearsErrors, CreateCampyearData, CreateCampyearResponses, CreateCampyearErrors, DeleteCampyearData, DeleteCampyearResponses, DeleteCampyearErrors, GetCampyearData, GetCampyearResponses, GetCampyearErrors, UpdateCampyearData, UpdateCampyearResponses, UpdateCampyearErrors, ActivateCampyearData, ActivateCampyearResponses, ActivateCampyearErrors, CloseCampyearData, CloseCampyearResponses, CloseCampyearErrors, OpenCampyearData, OpenCampyearResponses, OpenCampyearErrors, ExportParticipantsData, ExportParticipantsResponses, ExportParticipantsErrors, GetAllParticipantsData, GetAllParticipantsResponses, GetAllParticipantsErrors, SearchParticipantsData, SearchParticipantsResponses, SearchParticipantsErrors, DeleteParticipantData, DeleteParticipantResponses, DeleteParticipantErrors, GetParticipantData, GetParticipantResponses, GetParticipantErrors, UpdateParticipantData, UpdateParticipantResponses, UpdateParticipantErrors, UpdatePaymentData, UpdatePaymentResponses, UpdatePaymentErrors, CreateRegistrationData, CreateRegistrationResponses, CreateRegistrationErrors, GetAllVolunteersData, GetAllVolunteersResponses, GetAllVolunteersErrors, CreateVolunteerData, CreateVolunteerResponses, CreateVolunteerErrors, DeleteVolunteerData, DeleteVolunteerResponses, DeleteVolunteerErrors, GetVolunteerData, GetVolunteerResponses, GetVolunteerErrors, UpdateVolunteerData, UpdateVolunteerResponses, UpdateVolunteerErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all campyears
 * Gets all campyears
 */
export const getAllCampyears = <ThrowOnError extends boolean = false>(options?: Options<GetAllCampyearsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCampyearsResponses, GetAllCampyearsErrors, ThrowOnError>({
        url: '/campyear/api/v1/',
        ...options
    });
};

/**
 * Create a new campyear
 * Creates a new campyear.
 */
export const createCampyear = <ThrowOnError extends boolean = false>(options: Options<CreateCampyearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCampyearResponses, CreateCampyearErrors, ThrowOnError>({
        url: '/campyear/api/v1/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific campyear
 * Deletes a campyear by its year.
 */
export const deleteCampyear = <ThrowOnError extends boolean = false>(options: Options<DeleteCampyearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCampyearResponses, DeleteCampyearErrors, ThrowOnError>({
        url: '/campyear/api/v1/{year}',
        ...options
    });
};

/**
 * Get a specific campyear
 * Retrieves a campyear by its year.
 */
export const getCampyear = <ThrowOnError extends boolean = false>(options: Options<GetCampyearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCampyearResponses, GetCampyearErrors, ThrowOnError>({
        url: '/campyear/api/v1/{year}',
        ...options
    });
};

/**
 * Update a specific campyear
 * Updates the details of a campyear by its year.
 */
export const updateCampyear = <ThrowOnError extends boolean = false>(options: Options<UpdateCampyearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCampyearResponses, UpdateCampyearErrors, ThrowOnError>({
        url: '/campyear/api/v1/{year}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate a specific campyear
 * Marks a campyear as active by its year.
 */
export const activateCampyear = <ThrowOnError extends boolean = false>(options: Options<ActivateCampyearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ActivateCampyearResponses, ActivateCampyearErrors, ThrowOnError>({
        url: '/campyear/api/v1/{year}/activate',
        ...options
    });
};

/**
 * Close a specific campyear
 * Marks a campyear as closed by its year.
 */
export const closeCampyear = <ThrowOnError extends boolean = false>(options: Options<CloseCampyearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CloseCampyearResponses, CloseCampyearErrors, ThrowOnError>({
        url: '/campyear/api/v1/{year}/close',
        ...options
    });
};

/**
 * Open a specific campyear
 * Marks a campyear as open by its year.
 */
export const openCampyear = <ThrowOnError extends boolean = false>(options: Options<OpenCampyearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenCampyearResponses, OpenCampyearErrors, ThrowOnError>({
        url: '/campyear/api/v1/{year}/open',
        ...options
    });
};

/**
 * Export participants as CSV
 * Exports all participants for the active camp year along with their latest payment details.
 */
export const exportParticipants = <ThrowOnError extends boolean = false>(options?: Options<ExportParticipantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExportParticipantsResponses, ExportParticipantsErrors, ThrowOnError>({
        url: '/export/api/v1/participants',
        ...options
    });
};

/**
 * Get all participants by active year
 * Retrieves all participants for the active campyear.
 */
export const getAllParticipants = <ThrowOnError extends boolean = false>(options?: Options<GetAllParticipantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllParticipantsResponses, GetAllParticipantsErrors, ThrowOnError>({
        url: '/participant/api/v1/',
        ...options
    });
};

/**
 * Search participants
 * Searches participants based on optional filters: name, email, paymentMethod, paymentState, and attendance.
 */
export const searchParticipants = <ThrowOnError extends boolean = false>(options?: Options<SearchParticipantsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchParticipantsResponses, SearchParticipantsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/participant/api/v1/search',
        ...options
    });
};

/**
 * Delete a participant
 * Deletes a participant by its ID.
 */
export const deleteParticipant = <ThrowOnError extends boolean = false>(options: Options<DeleteParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteParticipantResponses, DeleteParticipantErrors, ThrowOnError>({
        url: '/participant/api/v1/{id}',
        ...options
    });
};

/**
 * Get a participant
 * Retrieves a specific participant by its ID.
 */
export const getParticipant = <ThrowOnError extends boolean = false>(options: Options<GetParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetParticipantResponses, GetParticipantErrors, ThrowOnError>({
        url: '/participant/api/v1/{id}',
        ...options
    });
};

/**
 * Update a participant
 * Updates the details of a participant by its ID.
 */
export const updateParticipant = <ThrowOnError extends boolean = false>(options: Options<UpdateParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateParticipantResponses, UpdateParticipantErrors, ThrowOnError>({
        url: '/participant/api/v1/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a specific payment
 * Updates the details of a payment by its id.
 */
export const updatePayment = <ThrowOnError extends boolean = false>(options: Options<UpdatePaymentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePaymentResponses, UpdatePaymentErrors, ThrowOnError>({
        url: '/payment/api/v1/{year}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register for Haag Uit
 * Creates a camp registration and redirects to payment if ideal.
 */
export const createRegistration = <ThrowOnError extends boolean = false>(options: Options<CreateRegistrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRegistrationResponses, CreateRegistrationErrors, ThrowOnError>({
        url: '/registration/api/v1/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all volunteers
 * Retrieves all volunteers.
 */
export const getAllVolunteers = <ThrowOnError extends boolean = false>(options?: Options<GetAllVolunteersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllVolunteersResponses, GetAllVolunteersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/volunteer/api/v1/',
        ...options
    });
};

/**
 * Create a volunteer
 * Creates a new volunteer.
 */
export const createVolunteer = <ThrowOnError extends boolean = false>(options: Options<CreateVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateVolunteerResponses, CreateVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/volunteer/api/v1/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a volunteer
 * Deletes a volunteer by its ID.
 */
export const deleteVolunteer = <ThrowOnError extends boolean = false>(options: Options<DeleteVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVolunteerResponses, DeleteVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/volunteer/api/v1/{id}',
        ...options
    });
};

/**
 * Get a volunteer
 * Retrieves a specific volunteer by its ID.
 */
export const getVolunteer = <ThrowOnError extends boolean = false>(options: Options<GetVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVolunteerResponses, GetVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/volunteer/api/v1/{id}',
        ...options
    });
};

/**
 * Update a volunteer
 * Updates the details of a volunteer by its ID.
 */
export const updateVolunteer = <ThrowOnError extends boolean = false>(options: Options<UpdateVolunteerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateVolunteerResponses, UpdateVolunteerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/volunteer/api/v1/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};