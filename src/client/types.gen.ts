// This file is auto-generated by @hey-api/openapi-ts

export type RequestCampyearRequest = {
    end: string;
    insuranceFee?: number;
    participationFee: number;
    start: string;
    year: number;
};

export type RequestRegistrationRequest = {
    accountCity?: string;
    accountName?: string;
    accountNumber?: string;
    address: string;
    city: string;
    comment?: string;
    dateOfBirth: string;
    email: string;
    emergencyContact: string;
    firstName: string;
    gender: 'm' | 'v' | 'nb';
    insurance?: boolean;
    lastName: string;
    paymentMethod: 'ideal' | 'incasso';
    phone: string;
    shirtSize: 'XS' | 'S' | 'M' | 'L' | 'XL';
    study: 'hbo-ict' | 'cmd' | 'ads-ai';
    termsConditions: boolean;
    zipCode: string;
};

export type RequestUpdateCampyearRequest = {
    end?: string;
    insuranceFee?: number;
    participationFee?: number;
    start?: string;
};

export type RequestUpdateParticipantRequest = {
    attendance?: 'open' | 'aanwezig' | 'afwezig' | 'afgemeld';
    shirtSize?: 'XS' | 'S' | 'M' | 'L' | 'XL';
};

export type RequestUpdatePaymentRequest = {
    paymentStatus?: 'paid';
};

export type ResponseApiError = {
    code: string;
    description: string;
    fields?: {
        [key: string]: string;
    };
    message: string;
    meta?: {
        [key: string]: string;
    };
};

export type ResponseCampyearResponse = {
    active: boolean;
    end: string;
    insuranceFee: number;
    open: boolean;
    participationFee: number;
    start: string;
    year: number;
};

export type ResponseParticipantResponse = {
    attendance: string;
    campyearYear: number;
    comment?: string;
    createdAt: string;
    id: number;
    insurance: boolean;
    payments?: Array<ResponsePaymentResponse>;
    person: ResponsePersonResponse;
    personId: number;
    shirtSize: 'XS' | 'S' | 'M' | 'L' | 'XL';
    study: string;
    updatedAt: string;
};

export type ResponseParticipantWithLatestPaymentResponse = {
    attendance: string;
    campyearYear: number;
    comment?: string;
    createdAt: string;
    id: number;
    insurance: boolean;
    latestPayment?: ResponsePaymentResponse;
    payments?: Array<ResponsePaymentResponse>;
    person: ResponsePersonResponse;
    personId: number;
    shirtSize: 'XS' | 'S' | 'M' | 'L' | 'XL';
    study: string;
    updatedAt: string;
};

export type ResponsePaymentResponse = {
    accountCity?: string;
    accountName?: string;
    accountNumber?: string;
    amount: number;
    createdAt: string;
    id: number;
    paymentId: string;
    paymentMethod: string;
    paymentStatus: string;
    updatedAt: string;
};

export type ResponsePersonResponse = {
    address: string;
    city: string;
    createdAt: string;
    dateOfBirth: string;
    email: string;
    emergencyContact: string;
    firstName: string;
    gender: 'm' | 'v' | 'nb';
    id: number;
    lastName: string;
    phone: string;
    updatedAt: string;
    zipCode: string;
};

export type GetAllCampyearsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/campyear/api/v1/';
};

export type GetAllCampyearsErrors = {
    /**
     * Internal server error
     */
    500: string;
};

export type GetAllCampyearsError = GetAllCampyearsErrors[keyof GetAllCampyearsErrors];

export type GetAllCampyearsResponses = {
    /**
     * All Campyears
     */
    200: Array<ResponseCampyearResponse>;
};

export type GetAllCampyearsResponse = GetAllCampyearsResponses[keyof GetAllCampyearsResponses];

export type CreateCampyearData = {
    /**
     * Campyear object to be created
     */
    body: RequestCampyearRequest;
    path?: never;
    query?: never;
    url: '/campyear/api/v1/';
};

export type CreateCampyearErrors = {
    /**
     * Ongeldig einddatum formaat
     */
    400: ResponseApiError;
    /**
     * Validation error
     */
    422: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type CreateCampyearError = CreateCampyearErrors[keyof CreateCampyearErrors];

export type CreateCampyearResponses = {
    /**
     * Campyear created
     */
    201: ResponseCampyearResponse;
};

export type CreateCampyearResponse = CreateCampyearResponses[keyof CreateCampyearResponses];

export type DeleteCampyearData = {
    body?: never;
    path: {
        /**
         * Year of the campyear
         */
        year: number;
    };
    query?: never;
    url: '/campyear/api/v1/{year}';
};

export type DeleteCampyearErrors = {
    /**
     * Invalid year format
     */
    400: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type DeleteCampyearError = DeleteCampyearErrors[keyof DeleteCampyearErrors];

export type DeleteCampyearResponses = {
    /**
     * Campyear deleted
     */
    204: string;
};

export type DeleteCampyearResponse = DeleteCampyearResponses[keyof DeleteCampyearResponses];

export type GetCampyearData = {
    body?: never;
    path: {
        /**
         * Year of the campyear
         */
        year: number;
    };
    query?: never;
    url: '/campyear/api/v1/{year}';
};

export type GetCampyearErrors = {
    /**
     * Invalid year format
     */
    400: ResponseApiError;
    /**
     * Kampjaar niet gevonden
     */
    404: ResponseApiError;
};

export type GetCampyearError = GetCampyearErrors[keyof GetCampyearErrors];

export type GetCampyearResponses = {
    /**
     * Campyear found
     */
    200: ResponseCampyearResponse;
};

export type GetCampyearResponse = GetCampyearResponses[keyof GetCampyearResponses];

export type UpdateCampyearData = {
    /**
     * Updated campyear object
     */
    body: RequestUpdateCampyearRequest;
    path: {
        /**
         * Year of the campyear
         */
        year: number;
    };
    query?: never;
    url: '/campyear/api/v1/{year}';
};

export type UpdateCampyearErrors = {
    /**
     * Ongeldig einddatum formaat
     */
    400: ResponseApiError;
    /**
     * Campyear not found
     */
    404: ResponseApiError;
    /**
     * Validation error
     */
    422: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type UpdateCampyearError = UpdateCampyearErrors[keyof UpdateCampyearErrors];

export type UpdateCampyearResponses = {
    /**
     * Campyear updated
     */
    200: ResponseCampyearResponse;
};

export type UpdateCampyearResponse = UpdateCampyearResponses[keyof UpdateCampyearResponses];

export type ActivateCampyearData = {
    body?: never;
    path: {
        /**
         * Year of the campyear
         */
        year: number;
    };
    query?: never;
    url: '/campyear/api/v1/{year}/activate';
};

export type ActivateCampyearErrors = {
    /**
     * Ongeldig jaarformaat
     */
    400: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type ActivateCampyearError = ActivateCampyearErrors[keyof ActivateCampyearErrors];

export type ActivateCampyearResponses = {
    /**
     * Campyear activated
     */
    200: string;
};

export type ActivateCampyearResponse = ActivateCampyearResponses[keyof ActivateCampyearResponses];

export type CloseCampyearData = {
    body?: never;
    path: {
        /**
         * Year of the campyear
         */
        year: number;
    };
    query?: never;
    url: '/campyear/api/v1/{year}/close';
};

export type CloseCampyearErrors = {
    /**
     * Invalid year format
     */
    400: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type CloseCampyearError = CloseCampyearErrors[keyof CloseCampyearErrors];

export type CloseCampyearResponses = {
    /**
     * Campyear closed
     */
    200: string;
};

export type CloseCampyearResponse = CloseCampyearResponses[keyof CloseCampyearResponses];

export type OpenCampyearData = {
    body?: never;
    path: {
        /**
         * Year of the campyear
         */
        year: number;
    };
    query?: never;
    url: '/campyear/api/v1/{year}/open';
};

export type OpenCampyearErrors = {
    /**
     * Invalid year format
     */
    400: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type OpenCampyearError = OpenCampyearErrors[keyof OpenCampyearErrors];

export type OpenCampyearResponses = {
    /**
     * Campyear opened
     */
    200: string;
};

export type OpenCampyearResponse = OpenCampyearResponses[keyof OpenCampyearResponses];

export type ExportParticipantsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/export/api/v1/participants';
};

export type ExportParticipantsErrors = {
    /**
     * Error message
     */
    500: string;
};

export type ExportParticipantsError = ExportParticipantsErrors[keyof ExportParticipantsErrors];

export type ExportParticipantsResponses = {
    /**
     * CSV file containing participant data
     */
    200: unknown;
};

export type GetAllParticipantsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/participant/api/v1/';
};

export type GetAllParticipantsErrors = {
    /**
     * Internal server errror
     */
    500: ResponseApiError;
};

export type GetAllParticipantsError = GetAllParticipantsErrors[keyof GetAllParticipantsErrors];

export type GetAllParticipantsResponses = {
    /**
     * All participants for the current active year with their latest payment
     */
    200: Array<ResponseParticipantWithLatestPaymentResponse>;
};

export type GetAllParticipantsResponse = GetAllParticipantsResponses[keyof GetAllParticipantsResponses];

export type SearchParticipantsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Name of the participant
         */
        name?: string;
        /**
         * Email of the participant
         */
        email?: string;
        /**
         * Payment method used by the participant
         */
        paymentMethod?: string;
        /**
         * Payment state of the participant
         */
        paymentState?: string;
        /**
         * Attendance status of the participant
         */
        attendance?: string;
    };
    url: '/participant/api/v1/search';
};

export type SearchParticipantsErrors = {
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type SearchParticipantsError = SearchParticipantsErrors[keyof SearchParticipantsErrors];

export type SearchParticipantsResponses = {
    /**
     * Filtered participants
     */
    200: Array<ResponseParticipantResponse>;
};

export type SearchParticipantsResponse = SearchParticipantsResponses[keyof SearchParticipantsResponses];

export type DeleteParticipantData = {
    body?: never;
    path: {
        /**
         * ID of the participant
         */
        id: number;
    };
    query?: never;
    url: '/participant/api/v1/{id}';
};

export type DeleteParticipantErrors = {
    /**
     * ongeldig id formaat
     */
    400: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type DeleteParticipantError = DeleteParticipantErrors[keyof DeleteParticipantErrors];

export type DeleteParticipantResponses = {
    /**
     * Participant deleted
     */
    204: string;
};

export type DeleteParticipantResponse = DeleteParticipantResponses[keyof DeleteParticipantResponses];

export type GetParticipantData = {
    body?: never;
    path: {
        /**
         * ID of the participant
         */
        id: number;
    };
    query?: never;
    url: '/participant/api/v1/{id}';
};

export type GetParticipantErrors = {
    /**
     * ongeldig id formaat
     */
    400: ResponseApiError;
    /**
     * deelnemer is niet gevonden
     */
    404: ResponseApiError;
};

export type GetParticipantError = GetParticipantErrors[keyof GetParticipantErrors];

export type GetParticipantResponses = {
    /**
     * Participant details
     */
    200: ResponseParticipantResponse;
};

export type GetParticipantResponse = GetParticipantResponses[keyof GetParticipantResponses];

export type UpdateParticipantData = {
    /**
     * Updated participant object
     */
    body: RequestUpdateParticipantRequest;
    path: {
        /**
         * ID of the participant
         */
        id: number;
    };
    query?: never;
    url: '/participant/api/v1/{id}';
};

export type UpdateParticipantErrors = {
    /**
     * ongeldig id formaat
     */
    400: ResponseApiError;
    /**
     * deelnemer is niet gevonden
     */
    404: ResponseApiError;
    /**
     * Validation error
     */
    422: ResponseApiError;
    /**
     * Internal server error
     */
    500: ResponseApiError;
};

export type UpdateParticipantError = UpdateParticipantErrors[keyof UpdateParticipantErrors];

export type UpdateParticipantResponses = {
    /**
     * Participant updated
     */
    200: ResponseParticipantResponse;
};

export type UpdateParticipantResponse = UpdateParticipantResponses[keyof UpdateParticipantResponses];

export type UpdatePaymentData = {
    /**
     * Updated payment object
     */
    body: RequestUpdatePaymentRequest;
    path: {
        /**
         * ID of the payment
         */
        id: number;
    };
    query?: never;
    url: '/payment/api/v1/{year}';
};

export type UpdatePaymentErrors = {
    /**
     * Invalid year format or validation error
     */
    400: string;
    /**
     * Payment not found
     */
    404: string;
    /**
     * Internal server error
     */
    500: string;
};

export type UpdatePaymentError = UpdatePaymentErrors[keyof UpdatePaymentErrors];

export type UpdatePaymentResponses = {
    /**
     * Payment updated
     */
    200: ResponsePaymentResponse;
};

export type UpdatePaymentResponse = UpdatePaymentResponses[keyof UpdatePaymentResponses];

export type CreateRegistrationData = {
    /**
     * Registration object to be created
     */
    body: RequestRegistrationRequest;
    path?: never;
    query?: never;
    url: '/registration/api/v1/register';
};

export type CreateRegistrationErrors = {
    /**
     * Validation error
     */
    400: string;
    /**
     * Internal server error
     */
    500: string;
};

export type CreateRegistrationError = CreateRegistrationErrors[keyof CreateRegistrationErrors];

export type CreateRegistrationResponses = {
    /**
     * Incasso payment
     */
    201: string;
};

export type CreateRegistrationResponse = CreateRegistrationResponses[keyof CreateRegistrationResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};